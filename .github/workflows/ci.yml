name: ci
on:
  pull_request:
  workflow_dispatch: { }   # 필요시 수동 실행
  push:
    branches: [ main ]    # (권장) main 푸시 시에도 CI 실행

concurrency:
  group: ci-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      # Gradle Wrapper 검증 (보안/안정성)
      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Make gradlew executable (Linux)
        run: chmod +x ./gradlew

      # DB 환경변수 주입 (Neon)
      - name: Export DB env for Spring Boot
        run: |
          echo "SPRING_DATASOURCE_URL=${{ secrets.NEON_JDBC_URL }}" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.NEON_DB_USER }}" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.NEON_DB_PASS }}" >> $GITHUB_ENV
          echo "DB 환경변수 주입 완료"

      # AWS 관련 환경변수 주입 (필요 시)
      - name: Export AWS env
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "AWS_STACK_AUTO=${{ secrets.AWS_STACK_AUTO }}" >> $GITHUB_ENV
          echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> $GITHUB_ENV


      - name: Code style checks (Spotless)
        run: |
          if ./gradlew tasks | grep -q "spotlessCheck"; then
             ./gradlew spotlessCheck --no-daemon
          fi

      - name: Build (tests included)
        run: ./gradlew clean build --no-daemon --stacktrace

      - name: Upload Test Reports (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            **/build/test-results/test/**
            **/build/reports/tests/test/**
          retention-days: 7

      # 배포/추적용 JAR 업로드 (CD에서 굳이 쓰지 않더라도 보관용으로 유용)
      - name: Upload JAR for deployment
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-build
          path: build/libs/*.jar
          if-no-files-found: error
          retention-days: 7

      - name: Upload Checkstyle reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-reports
          path: build/reports/checkstyle/*.html

      - name: editorconfig-check
        uses: editorconfig-checker/action-editorconfig-checker@v2
